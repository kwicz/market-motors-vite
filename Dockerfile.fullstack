# Multi-stage build for full-stack application
FROM node:20-alpine AS base

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY .npmrc ./

# Install all dependencies
RUN npm ci --prefer-offline --no-audit --no-fund

# Copy source code
COPY . .

# Stage 1: Build Frontend
FROM base AS frontend-builder
RUN npm run build

# Stage 2: Build Backend
FROM base AS backend-builder
RUN npm run build:server

# Stage 3: Production
FROM node:20-alpine AS production

WORKDIR /app

# Set environment variables
ENV NODE_ENV=production
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_FUND=false

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --omit=dev --prefer-offline --no-audit --no-fund

# Copy built frontend from frontend-builder stage
COPY --from=frontend-builder /app/dist ./dist

# Copy built backend from backend-builder stage
COPY --from=backend-builder /app/server/dist ./server/dist

# Copy necessary backend files
COPY server/package.json ./server/
COPY lib ./lib

# Install serve for static file serving
RUN npm install -g serve

# Expose ports
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start both frontend and backend
CMD ["sh", "-c", "serve -s dist -l 4173 & npm run start:server"] 